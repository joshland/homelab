# Disable DNS Server.
port=0
{% if dhcp_proxy == true %}
# We're DHCP proxying on the network of the homelab host
dhcp-range={{ ansible_default_ipv4.address }},proxy
pxe-service=X86-64_EFI, "Boot From Network, (UEFI)", grubx64.efi

# Enable TFTP server
enable-tftp
tftp-root=/tftp
{% else %}
# We're DHCP configuring on this range
dhcp-range={{ ansible_default_ipv4.network | ansible.netcommon.ipmath(1) }},{{ ansible_default_ipv4.broadcast | ansible.netcommon.ipmath(-1) }},{{ ansible_default_ipv4.netmask }},12h
dhcp-option=3,{{ ansible_default_ipv4.gateway }}
dhcp-authoritative

# Match Arch Types efi x86 and x64
dhcp-match=set:efi-x86_64,option:client-arch,7
dhcp-match=set:efi-x86_64,option:client-arch,9

# Set the Boot file based on the tag from above
dhcp-boot=tag:efi-x86_64,grubx64.efi


## Example host override
#dhcp-host=11:22:33:44:55:66,192.168.0.60
{% for k, v in metal.children.masters.hosts.items() %}
dhcp-host={{ v.mac }},{{ v.ansible_host }}
{% endfor %}
{% for k, v in metal.children.workers.hosts.items() %}
dhcp-host={{ v.mac }},{{ v.ansible_host }}
{% endfor %}

{% if ntp_server is defined %}
#Attn: only works with ipv4 dotted quad addrs
#dhcp-option=42,{{ ntp_server}}
{% endif %}

{% if dns_server is defined %}
dhcp-option=6,{{ dns_server }}
{% endif %}

{% if dns_domain is defined %}
dhcp-option=15,{{ dns_domain }}
{% endif %}

{% endif %}
# Log DHCP queries to stdout
log-queries
log-dhcp
log-facility=-

# Enable TFTP server
enable-tftp
tftp-root=/tftp
